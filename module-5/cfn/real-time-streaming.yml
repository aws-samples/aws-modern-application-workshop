AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: A stack that gives Mythical Mysfits the abillity to ingest user
            clicks and process them in real time.
Parameters:
  ServiceStackName:
    Type: String
    Default: MythicalMysfitsServiceStack
    Description: The name of the parent Fargate service stack that you created. Necessary
                 to locate and reference resources created by that stack.
Resources:
  # A Kinesis Firehose Delivery Stream that provides real-time record ingestion
  # and native integration with AWS Lambda functions for real-time processing
  # of those records before they are stored in Amazon S3.
  MysfitsFireHoseToS3:
    DependsOn:
      - FirehoseDeliveryPolicy
      - MysfitsClicksProcessor
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref ClicksDestinationBucket
        BufferingHints:
          IntervalInSeconds: '60'
          SizeInMBs: '50'
        CompressionFormat: UNCOMPRESSED
        Prefix: firehose/
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
        ProcessingConfiguration:
          Enabled: 'true'
          Processors:
            - Parameters:
                - ParameterName: LambdaArn
                  ParameterValue: !GetAtt MysfitsClicksProcessor.Arn
              Type: Lambda

  # An Amazon S3 bucket where the click records are stored after they are
  # processed by a Lambda function.
  ClicksDestinationBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled

  # The IAM role for the above Firehose Delivery Stream.
  FirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'

  # An IAM policy for the above IAM Role which gives our Delivery Stream
  # the ability to invoke the  created Lambda function, as well as deliver
  # records to the created S3 bucket.
  FirehoseDeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - MysfitsClicksProcessor
      - ClicksDestinationBucket
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ClicksDestinationBucket
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref ClicksDestinationBucket
                  - '*'
          - Effect: Allow
            Action:
                - 'lambda:InvokeFunction'
            Resource: !GetAtt MysfitsClicksProcessor.Arn
      Roles:
        - !Ref FirehoseDeliveryRole

  # An AWS Lambda function that will process and enrich mysfit profile clicks
  # before they are stored in Amazon S3.
  MysfitsClicksProcessor:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: streamProcessor.processRecord
      Runtime: python3.6
      CodeUri: .
      Description: An Amazon Kinesis Firehose stream processor that enriches click
                   records to not just include a mysfitId, but also other
                   attributes that can be analyzed later.
      MemorySize: 128
      Timeout: 30
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:GetItem'
              Resource:
                'Fn::Join':
                  - ''
                  - - 'arn:aws:dynamodb:'
                    - Ref: 'AWS::Region'
                    - ':'
                    - Ref: 'AWS::AccountId'
                    - ':table/MysfitsTable'

 # A Lambda Permission resource that permits the created Firehose Delivery
 # Stream to act as an Event Source for the above AWS Lambda function.
  MysfitsClicksProcessorPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MysfitsClicksProcessor
      Principal: firehose.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt MysfitsFireHoseToS3.Arn

  # An API Gateway execution role for the below REST API.
  ClickProcessingApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: 'sts:AssumeRole'

  # An IAM policy that permits our created streaming API service to integrate
  # with the Kinesis Firehose API PutRecord as an AWS Service Proxy.
  ClickProcessingApiPolicy:
    Type: 'AWS::IAM::Policy'
    DependsOn:
      - ClickProcessingApiRole
    Properties:
      PolicyName: api_gateway_firehose_proxy_role
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
                - 'firehose:PutRecord'
            Resource: !GetAtt MysfitsFireHoseToS3.Arn
      Roles:
        - !Ref ClickProcessingApiRole

  # A new REST API that acts as an AWS Service proxy to the Kinesis Firehose
  # PutRecord API.
  ClickProcessingApi:
    Type: AWS::Serverless::Api
    DependsOn:
      - MysfitsFireHoseToS3
      - ClickProcessingApiRole
    Properties:
      EndpointConfiguration: REGIONAL
      StageName: prod
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type'"
      DefinitionBody:
          swagger: 2.0
          info:
            title:
              Ref: AWS::StackName
          paths:
            "/clicks":
              put:
                consumes:
                  - 'application/json'
                produces:
                  - 'application/json'
                responses:
                  '200':
                    statusCode: 200
                    headers:
                      Access-Control-Allow-Headers:
                          type: string
                      Access-Control-Allow-Methods:
                          type: string
                      Access-Control-Allow-Origin:
                          type: string
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: 200
                      responseParameters:
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
                        method.response.header.Access-Control-Allow-Methods: "'OPTIONS, PUT'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  credentials: !GetAtt ClickProcessingApiRole.Arn
                  connectionType: INTERNET
                  httpMethod: POST
                  type: AWS
                  uri: !Join ["", ["arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":firehose:action/PutRecord" ] ]
                  # The below requestTemplate transforms the incoming JSON
                  # payload into the request object structure that the Kinesis
                  # Firehose PutRecord API requires. So now our frontend
                  # JavaScript can call an API that we have designed ourselves
                  # while actually directly integrating with an AWS Service API.
                  requestTemplates:
                    application/json: !Join ["", ["{ \"DeliveryStreamName\": \"", !Ref MysfitsFireHoseToS3, "\",    \"Record\": {   \"Data\": \"$util.base64Encode($input.json('$'))\" } }" ] ]
                  requestParameters:
                    integration.request.header.Content-Type: "'application/x-amz-json-1.1'"

Outputs:
  StreamingApiEndpoint:
    Description: The endpoint for the REST API created with API Gateway
    Value: !Join ['', ['https://', !Ref 'ClickProcessingApi',  '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/prod']]
